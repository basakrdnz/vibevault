// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  watchlistItems WatchlistItem[]
  moodEntries    MoodEntry[]
  movieDiscoveries MovieDiscovery[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Movie {
  id          String   @id @default(cuid())
  title       String
  year        String
  genre       String?
  director    String?
  plot        String?
  poster      String?
  imdbRating  String?
  runtime     String?
  language    String?
  country     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  watchlistItems WatchlistItem[]
  moodEntries    MoodEntry[]
  movieDiscoveries MovieDiscovery[]
  
  @@map("movies")
}

model WatchlistItem {
  id        String   @id @default(cuid())
  userId    String
  movieId   String
  status    String   @default("want_to_watch") // want_to_watch, watching, watched
  rating    Int?     // 1-5 stars
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  
  @@unique([userId, movieId])
  @@map("watchlist_items")
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  movieId   String
  mood      String   // happy, sad, excited, scared, romantic, etc.
  intensity Int      // 1-10 scale
  notes     String?
  createdAt DateTime @default(now())
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  
  @@map("mood_entries")
}

model FeaturedMoviesCache {
  id        String   @id @default(cuid())
  type      String   // "featured", "popular", etc.
  movieIds  String   // JSON array of movie IDs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([type])
  @@map("featured_movies_cache")
}

model MovieDiscovery {
  id        String   @id @default(cuid())
  userId    String
  movieId   String
  discoveredAt DateTime @default(now())
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  
  @@unique([userId, movieId])
  @@map("movie_discoveries")
}